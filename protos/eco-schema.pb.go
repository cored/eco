// Code generated by protoc-gen-go. DO NOT EDIT.
// source: eco-schema.proto

package eco

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Text struct {
	Text                 string   `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Text) Reset()         { *m = Text{} }
func (m *Text) String() string { return proto.CompactTextString(m) }
func (*Text) ProtoMessage()    {}
func (*Text) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c601cdd6d8c8bb, []int{0}
}

func (m *Text) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Text.Unmarshal(m, b)
}
func (m *Text) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Text.Marshal(b, m, deterministic)
}
func (m *Text) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Text.Merge(m, src)
}
func (m *Text) XXX_Size() int {
	return xxx_messageInfo_Text.Size(m)
}
func (m *Text) XXX_DiscardUnknown() {
	xxx_messageInfo_Text.DiscardUnknown(m)
}

var xxx_messageInfo_Text proto.InternalMessageInfo

func (m *Text) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func init() {
	proto.RegisterType((*Text)(nil), "eco.Text")
}

func init() { proto.RegisterFile("eco-schema.proto", fileDescriptor_33c601cdd6d8c8bb) }

var fileDescriptor_33c601cdd6d8c8bb = []byte{
	// 106 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x48, 0x4d, 0xce, 0xd7,
	0x2d, 0x4e, 0xce, 0x48, 0xcd, 0x4d, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4e, 0x4d,
	0xce, 0x57, 0x92, 0xe2, 0x62, 0x09, 0x49, 0xad, 0x28, 0x11, 0x12, 0xe2, 0x62, 0x29, 0x49, 0xad,
	0x28, 0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x8d, 0x54, 0xb9, 0x98, 0x5d, 0x93,
	0xf3, 0x85, 0xe4, 0xb8, 0x58, 0x5c, 0x93, 0x33, 0xf2, 0x85, 0x38, 0xf5, 0x52, 0x93, 0xf3, 0xf5,
	0x40, 0xaa, 0xa5, 0x10, 0x4c, 0x25, 0x86, 0x24, 0x36, 0xb0, 0x71, 0xc6, 0x80, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xc3, 0x41, 0xec, 0x06, 0x62, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EcoClient is the client API for Eco service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EcoClient interface {
	Echo(ctx context.Context, in *Text, opts ...grpc.CallOption) (*Text, error)
}

type ecoClient struct {
	cc *grpc.ClientConn
}

func NewEcoClient(cc *grpc.ClientConn) EcoClient {
	return &ecoClient{cc}
}

func (c *ecoClient) Echo(ctx context.Context, in *Text, opts ...grpc.CallOption) (*Text, error) {
	out := new(Text)
	err := c.cc.Invoke(ctx, "/eco.Eco/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EcoServer is the server API for Eco service.
type EcoServer interface {
	Echo(context.Context, *Text) (*Text, error)
}

func RegisterEcoServer(s *grpc.Server, srv EcoServer) {
	s.RegisterService(&_Eco_serviceDesc, srv)
}

func _Eco_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Text)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcoServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eco.Eco/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcoServer).Echo(ctx, req.(*Text))
	}
	return interceptor(ctx, in, info, handler)
}

var _Eco_serviceDesc = grpc.ServiceDesc{
	ServiceName: "eco.Eco",
	HandlerType: (*EcoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _Eco_Echo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eco-schema.proto",
}
